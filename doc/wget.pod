=head1 NAME

Wget - The non-interactive network downloader.

=head1 SYNOPSIS

wget [I<option>]... [I<URL>]...

=head1 DESCRIPTION

GNU Wget is a free utility for non-interactive download of files from
the Web.  It supports HTTP, HTTPS, and FTP protocols, as
well as retrieval through HTTP proxies.

Wget is non-interactive, meaning that it can work in the background,
while the user is not logged on.  This allows you to start a retrieval
and disconnect from the system, letting Wget finish the work.  By
contrast, most of the Web browsers require constant user's presence,
which can be a great hindrance when transferring a lot of data.

Wget can follow links in HTML and XHTML pages and create local 
versions of remote web sites, fully recreating the directory structure of 
the original site.  This is sometimes referred to as ``recursive
downloading.''  While doing that, Wget respects the Robot Exclusion
Standard (F</robots.txt>).  Wget can be instructed to convert the
links in downloaded HTML files to the local files for offline
viewing.

Wget has been designed for robustness over slow or unstable network
connections; if a download fails due to a network problem, it will
keep retrying until the whole file has been retrieved.  If the server
supports regetting, it will instruct the server to continue the
download from where it left off.

=head1 OPTIONS



=head2 Basic Startup Options



=over 4


=item B<-V>


=item B<--version>

Display the version of Wget.


=item B<-h>


=item B<--help>

Print a help message describing all of Wget's command-line options.


=item B<-b>


=item B<--background>

Go to background immediately after startup.  If no output file is
specified via the B<-o>, output is redirected to F<wget-log>.


=item B<-e> I<command>


=item B<--execute> I<command>

Execute I<command> as if it were a part of F<.wgetrc>.  A command thus invoked will be executed
I<after> the commands in F<.wgetrc>, thus taking precedence over
them.

=back



=head2 Logging and Input File Options



=over 4


=item B<-o> I<logfile>


=item B<--output-file=>I<logfile>

Log all messages to I<logfile>.  The messages are normally reported
to standard error.


=item B<-a> I<logfile>


=item B<--append-output=>I<logfile>

Append to I<logfile>.  This is the same as B<-o>, only it appends
to I<logfile> instead of overwriting the old log file.  If
I<logfile> does not exist, a new file is created.


=item B<-d>


=item B<--debug>

Turn on debug output, meaning various information important to the
developers of Wget if it does not work properly.  Your system
administrator may have chosen to compile Wget without debug support, in
which case B<-d> will not work.  Please note that compiling with
debug support is always safe---Wget compiled with the debug support will
I<not> print any debug info unless requested with B<-d>.



=item B<-q>


=item B<--quiet>

Turn off Wget's output.


=item B<-v>


=item B<--verbose>

Turn on verbose output, with all the available data.  The default output
is verbose.


=item B<-nv>


=item B<--non-verbose>

Non-verbose output---turn off verbose without being completely quiet
(use B<-q> for that), which means that error messages and basic
information still get printed.


=item B<-i> I<file>


=item B<--input-file=>I<file>

Read URLs from I<file>, in which case no URLs need to be on
the command line.  If there are URLs both on the command line and
in an input file, those on the command lines will be the first ones to
be retrieved.  The I<file> need not be an HTML document (but no
harm if it is)---it is enough if the URLs are just listed
sequentially.

However, if you specify B<--force-html>, the document will be
regarded as B<html>.  In that case you may have problems with
relative links, which you can solve either by adding C<E<lt>base
href="I<url>"E<gt>> to the documents or by specifying
B<--base=>I<url> on the command line.


=item B<-F>


=item B<--force-html>

When input is read from a file, force it to be treated as an HTML
file.  This enables you to retrieve relative links from existing
HTML files on your local disk, by adding C<E<lt>base
href="I<url>"E<gt>> to HTML, or using the B<--base> command-line
option.


=item B<-B> I<URL>


=item B<--base=>I<URL>

When used in conjunction with B<-F>, prepends I<URL> to relative
links in the file specified by B<-i>.

=back



=head2 Download Options



=over 4


=item B<--bind-address=>I<ADDRESS>

When making client TCP/IP connections, C<bind()> to I<ADDRESS> on
the local machine.  I<ADDRESS> may be specified as a hostname or IP
address.  This option can be useful if your machine is bound to multiple
IPs.


=item B<-t> I<number>


=item B<--tries=>I<number>

Set number of retries to I<number>.  Specify 0 or B<inf> for
infinite retrying.  The default is to retry 20 times, with the exception
of fatal errors like ``connection refused'' or ``not found'' (404),
which are not retried.


=item B<-O> I<file>


=item B<--output-document=>I<file>

The documents will not be written to the appropriate files, but all will
be concatenated together and written to I<file>.  If I<file>
already exists, it will be overwritten.  If the I<file> is B<->,
the documents will be written to standard output.  Including this option
automatically sets the number of tries to 1.


=item B<-nc>


=item B<--no-clobber>

If a file is downloaded more than once in the same directory, Wget's
behavior depends on a few options, including B<-nc>.  In certain
cases, the local file will be I<clobbered>, or overwritten, upon
repeated download.  In other cases it will be preserved.

When running Wget without B<-N>, B<-nc>, or B<-r>,
downloading the same file in the same directory will result in the
original copy of I<file> being preserved and the second copy being
named I<file>B<.1>.  If that file is downloaded yet again, the
third copy will be named I<file>B<.2>, and so on.  When
B<-nc> is specified, this behavior is suppressed, and Wget will
refuse to download newer copies of I<file>.  Therefore,
``C<no-clobber>'' is actually a misnomer in this mode---it's not
clobbering that's prevented (as the numeric suffixes were already
preventing clobbering), but rather the multiple version saving that's
prevented.

When running Wget with B<-r>, but without B<-N> or B<-nc>,
re-downloading a file will result in the new copy simply overwriting the
old.  Adding B<-nc> will prevent this behavior, instead causing the
original version to be preserved and any newer copies on the server to
be ignored.

When running Wget with B<-N>, with or without B<-r>, the
decision as to whether or not to download a newer copy of a file depends
on the local and remote timestamp and size of the file.  B<-nc> may not be specified at the same
time as B<-N>.

Note that when B<-nc> is specified, files with the suffixes
B<.html> or (yuck) B<.htm> will be loaded from the local disk
and parsed as if they had been retrieved from the Web.


=item B<-c>


=item B<--continue>

Continue getting a partially-downloaded file.  This is useful when you
want to finish up a download started by a previous instance of Wget, or
by another program.  For instance:

	
	wget -c ftp://sunsite.doc.ic.ac.uk/ls-lR.Z


If there is a file named F<ls-lR.Z> in the current directory, Wget
will assume that it is the first portion of the remote file, and will
ask the server to continue the retrieval from an offset equal to the
length of the local file.

Note that you don't need to specify this option if you just want the
current invocation of Wget to retry downloading a file should the
connection be lost midway through.  This is the default behavior.
B<-c> only affects resumption of downloads started I<prior> to
this invocation of Wget, and whose local files are still sitting around.

Without B<-c>, the previous example would just download the remote
file to F<ls-lR.Z.1>, leaving the truncated F<ls-lR.Z> file
alone.

Beginning with Wget 1.7, if you use B<-c> on a non-empty file, and
it turns out that the server does not support continued downloading,
Wget will refuse to start the download from scratch, which would
effectively ruin existing contents.  If you really want the download to
start from scratch, remove the file.

Also beginning with Wget 1.7, if you use B<-c> on a file which is of
equal size as the one on the server, Wget will refuse to download the
file and print an explanatory message.  The same happens when the file
is smaller on the server than locally (presumably because it was changed
on the server since your last download attempt)---because ``continuing''
is not meaningful, no download occurs.

On the other side of the coin, while using B<-c>, any file that's
bigger on the server than locally will be considered an incomplete
download and only C<(length(remote) - length(local))> bytes will be
downloaded and tacked onto the end of the local file.  This behavior can
be desirable in certain cases---for instance, you can use B<wget -c>
to download just the new portion that's been appended to a data
collection or log file.

However, if the file is bigger on the server because it's been
I<changed>, as opposed to just I<appended> to, you'll end up
with a garbled file.  Wget has no way of verifying that the local file
is really a valid prefix of the remote file.  You need to be especially
careful of this when using B<-c> in conjunction with B<-r>,
since every file will be considered as an "incomplete download" candidate.

Another instance where you'll get a garbled file if you try to use
B<-c> is if you have a lame HTTP proxy that inserts a
``transfer interrupted'' string into the local file.  In the future a
``rollback'' option may be added to deal with this case.

Note that B<-c> only works with FTP servers and with HTTP
servers that support the C<Range> header.


=item B<--progress=>I<type>

Select the type of the progress indicator you wish to use.  Legal
indicators are ``dot'' and ``bar''.

The ``bar'' indicator is used by default.  It draws an ASCII progress
bar graphics (a.k.a ``thermometer'' display) indicating the status of
retrieval.  If the output is not a TTY, the ``dot'' bar will be used by
default.

Use B<--progress=dot> to switch to the ``dot'' display.  It traces
the retrieval by printing dots on the screen, each dot representing a
fixed amount of downloaded data.

When using the dotted retrieval, you may also set the I<style> by
specifying the type as B<dot:>I<style>.  Different styles assign
different meaning to one dot.  With the C<default> style each dot
represents 1K, there are ten dots in a cluster and 50 dots in a line.
The C<binary> style has a more ``computer''-like orientation---8K
dots, 16-dots clusters and 48 dots per line (which makes for 384K
lines).  The C<mega> style is suitable for downloading very large
files---each dot represents 64K retrieved, there are eight dots in a
cluster, and 48 dots on each line (so each line contains 3M).

Note that you can set the default style using the C<progress>
command in F<.wgetrc>.  That setting may be overridden from the
command line.  The exception is that, when the output is not a TTY, the
``dot'' progress will be favored over ``bar''.  To force the bar output,
use B<--progress=bar:force>.


=item B<-N>


=item B<--timestamping>

Turn on time-stamping.  


=item B<-S>


=item B<--server-response>

Print the headers sent by HTTP servers and responses sent by
FTP servers.


=item B<--spider>

When invoked with this option, Wget will behave as a Web I<spider>,
which means that it will not download the pages, just check that they
are there.  For example, you can use Wget to check your bookmarks:

	
	wget --spider --force-html -i bookmarks.html


This feature needs much more work for Wget to get close to the
functionality of real web spiders.


=item B<-T seconds>


=item B<--timeout=>I<seconds>

Set the network timeout to I<seconds> seconds.  This is equivalent
to specifying B<--dns-timeout>, B<--connect-timeout>, and
B<--read-timeout>, all at the same time.

Whenever Wget connects to or reads from a remote host, it checks for a
timeout and aborts the operation if the time expires.  This prevents
anomalous occurrences such as hanging reads or infinite connects.  The
only timeout enabled by default is a 900-second timeout for reading.
Setting timeout to 0 disables checking for timeouts.

Unless you know what you are doing, it is best not to set any of the
timeout-related options.


=item B<--dns-timeout=>I<seconds>

Set the DNS lookup timeout to I<seconds> seconds.  DNS lookups that
don't complete within the specified time will fail.  By default, there
is no timeout on DNS lookups, other than that implemented by system
libraries.


=item B<--connect-timeout=>I<seconds>

Set the connect timeout to I<seconds> seconds.  TCP connections that
take longer to establish will be aborted.  By default, there is no
connect timeout, other than that implemented by system libraries.


=item B<--read-timeout=>I<seconds>

Set the read (and write) timeout to I<seconds> seconds.  Reads that
take longer will fail.  The default value for read timeout is 900
seconds.


=item B<--limit-rate=>I<amount>

Limit the download speed to I<amount> bytes per second.  Amount may
be expressed in bytes, kilobytes with the B<k> suffix, or megabytes
with the B<m> suffix.  For example, B<--limit-rate=20k> will
limit the retrieval rate to 20KB/s.  This kind of thing is useful when,
for whatever reason, you don't want Wget to consume the entire available
bandwidth.

Note that Wget implements the limiting by sleeping the appropriate
amount of time after a network read that took less time than specified
by the rate.  Eventually this strategy causes the TCP transfer to slow
down to approximately the specified rate.  However, it may take some
time for this balance to be achieved, so don't be surprised if limiting
the rate doesn't work well with very small files.


=item B<-w> I<seconds>


=item B<--wait=>I<seconds>

Wait the specified number of seconds between the retrievals.  Use of
this option is recommended, as it lightens the server load by making the
requests less frequent.  Instead of in seconds, the time can be
specified in minutes using the C<m> suffix, in hours using C<h>
suffix, or in days using C<d> suffix.

Specifying a large value for this option is useful if the network or the
destination host is down, so that Wget can wait long enough to
reasonably expect the network error to be fixed before the retry.


=item B<--waitretry=>I<seconds>

If you don't want Wget to wait between I<every> retrieval, but only
between retries of failed downloads, you can use this option.  Wget will
use I<linear backoff>, waiting 1 second after the first failure on a
given file, then waiting 2 seconds after the second failure on that
file, up to the maximum number of I<seconds> you specify.  Therefore,
a value of 10 will actually make Wget wait up to (1 + 2 + ... + 10) = 55
seconds per file.

Note that this option is turned on by default in the global
F<wgetrc> file.


=item B<--random-wait>

Some web sites may perform log analysis to identify retrieval programs
such as Wget by looking for statistically significant similarities in
the time between requests. This option causes the time between requests
to vary between 0 and 2 * I<wait> seconds, where I<wait> was
specified using the B<--wait> option, in order to mask Wget's
presence from such analysis.

A recent article in a publication devoted to development on a popular
consumer platform provided code to perform this analysis on the fly.
Its author suggested blocking at the class C address level to ensure
automated retrieval programs were blocked despite changing DHCP-supplied
addresses.

The B<--random-wait> option was inspired by this ill-advised
recommendation to block many unrelated users from a web site due to the
actions of one.


=item B<-Y on/off>


=item B<--proxy=on/off>

Turn proxy support on or off.  The proxy is on by default if the
appropriate environment variable is defined.

For more information about the use of proxies with Wget, 


=item B<-Q> I<quota>


=item B<--quota=>I<quota>

Specify download quota for automatic retrievals.  The value can be
specified in bytes (default), kilobytes (with B<k> suffix), or
megabytes (with B<m> suffix).

Note that quota will never affect downloading a single file.  So if you
specify B<wget -Q10k ftp://wuarchive.wustl.edu/ls-lR.gz>, all of the
F<ls-lR.gz> will be downloaded.  The same goes even when several
URLs are specified on the command-line.  However, quota is
respected when retrieving either recursively, or from an input file.
Thus you may safely type B<wget -Q2m -i sites>---download will be
aborted when the quota is exceeded.

Setting quota to 0 or to B<inf> unlimits the download quota.


=item B<--dns-cache=off>

Turn off caching of DNS lookups.  Normally, Wget remembers the addresses
it looked up from DNS so it doesn't have to repeatedly contact the DNS
server for the same (typically small) set of addresses it retrieves
from.  This cache exists in memory only; a new Wget run will contact DNS
again.

However, in some cases it is not desirable to cache host names, even for
the duration of a short-running application like Wget.  For example,
some HTTP servers are hosted on machines with dynamically allocated IP
addresses that change from time to time.  Their DNS entries are updated
along with each change.  When Wget's download from such a host gets
interrupted by IP address change, Wget retries the download, but (due to
DNS caching) it contacts the old address.  With the DNS cache turned
off, Wget will repeat the DNS lookup for every connect and will thus get
the correct dynamic address every time---at the cost of additional DNS
lookups where they're probably not needed.

If you don't understand the above description, you probably won't need
this option.


=item B<--restrict-file-names=>I<mode>

Change which characters found in remote URLs may show up in local file
names generated from those URLs.  Characters that are I<restricted>
by this option are escaped, i.e. replaced with B<%HH>, where
B<HH> is the hexadecimal number that corresponds to the restricted
character.

By default, Wget escapes the characters that are not valid as part of
file names on your operating system, as well as control characters that
are typically unprintable.  This option is useful for changing these
defaults, either because you are downloading to a non-native partition,
or because you want to disable escaping of the control characters.

When mode is set to ``unix'', Wget escapes the character B</> and
the control characters in the ranges 0--31 and 128--159.  This is the
default on Unix-like OS'es.

When mode is set to ``windows'', Wget escapes the characters B<\>,
B<|>, B</>, B<:>, B<?>, B<">, B<*>, B<E<lt>>,
B<E<gt>>, and the control characters in the ranges 0--31 and 128--159.
In addition to this, Wget in Windows mode uses B<+> instead of
B<:> to separate host and port in local file names, and uses
B<@} instead of @samp{?> to separate the query portion of the file
name from the rest.  Therefore, a URL that would be saved as
B<www.xemacs.org:4300/search.pl?input=blah> in Unix mode would be
saved as B<www.xemacs.org+4300/search.pl@input=blah> in Windows
mode.  This mode is the default on Windows.

If you append B<,nocontrol> to the mode, as in
B<unix,nocontrol>, escaping of the control characters is also
switched off.  You can use B<--restrict-file-names=nocontrol> to
turn off escaping of control characters without affecting the choice of
the OS to use as file name restriction mode.

=back



=head2 Directory Options



=over 4


=item B<-nd>


=item B<--no-directories>

Do not create a hierarchy of directories when retrieving recursively.
With this option turned on, all files will get saved to the current
directory, without clobbering (if a name shows up more than once, the
filenames will get extensions B<.n>).


=item B<-x>


=item B<--force-directories>

The opposite of B<-nd>---create a hierarchy of directories, even if
one would not have been created otherwise.  E.g. B<wget -x
http://fly.srk.fer.hr/robots.txt> will save the downloaded file to
F<fly.srk.fer.hr/robots.txt>.


=item B<-nH>


=item B<--no-host-directories>

Disable generation of host-prefixed directories.  By default, invoking
Wget with B<-r http://fly.srk.fer.hr/> will create a structure of
directories beginning with F<fly.srk.fer.hr/>.  This option disables
such behavior.


=item B<--cut-dirs=>I<number>

Ignore I<number> directory components.  This is useful for getting a
fine-grained control over the directory where recursive retrieval will
be saved.

Take, for example, the directory at
B<ftp://ftp.xemacs.org/pub/xemacs/>.  If you retrieve it with
B<-r>, it will be saved locally under
F<ftp.xemacs.org/pub/xemacs/>.  While the B<-nH> option can
remove the F<ftp.xemacs.org/> part, you are still stuck with
F<pub/xemacs>.  This is where B<--cut-dirs> comes in handy; it
makes Wget not ``see'' I<number> remote directory components.  Here
are several examples of how B<--cut-dirs> option works.

	
	No options        -> ftp.xemacs.org/pub/xemacs/
	-nH               -> pub/xemacs/
	-nH --cut-dirs=1  -> xemacs/
	-nH --cut-dirs=2  -> .
	
	--cut-dirs=1      -> ftp.xemacs.org/xemacs/
	...


If you just want to get rid of the directory structure, this option is
similar to a combination of B<-nd> and B<-P>.  However, unlike
B<-nd>, B<--cut-dirs> does not lose with subdirectories---for
instance, with B<-nH --cut-dirs=1>, a F<beta/> subdirectory will
be placed to F<xemacs/beta>, as one would expect.


=item B<-P> I<prefix>


=item B<--directory-prefix=>I<prefix>

Set directory prefix to I<prefix>.  The I<directory prefix> is the
directory where all other files and subdirectories will be saved to,
i.e. the top of the retrieval tree.  The default is B<.> (the
current directory).

=back



=head2 HTTP Options



=over 4


=item B<-E>


=item B<--html-extension>

If a file of type B<application/xhtml+xml> or B<text/html> is 
downloaded and the URL does not end with the regexp 
B<\.[Hh][Tt][Mm][Ll]?>, this option will cause the suffix B<.html> 
to be appended to the local filename.  This is useful, for instance, when 
you're mirroring a remote site that uses B<.asp> pages, but you want 
the mirrored pages to be viewable on your stock Apache server.  Another 
good use for this is when you're downloading CGI-generated materials.  A URL 
like B<http://site.com/article.cgi?25> will be saved as
F<article.cgi?25.html>.

Note that filenames changed in this way will be re-downloaded every time
you re-mirror a site, because Wget can't tell that the local
F<I<X>.html> file corresponds to remote URL I<X> (since
it doesn't yet know that the URL produces output of type
B<text/html> or B<application/xhtml+xml>.  To prevent this 
re-downloading, you must use B<-k> and B<-K> so that the original 
version of the file will be saved as F<I<X>.orig>.


=item B<--http-user=>I<user>


=item B<--http-passwd=>I<password>

Specify the username I<user> and password I<password> on an
HTTP server.  According to the type of the challenge, Wget will
encode them using either the C<basic> (insecure) or the
C<digest> authentication scheme.

Another way to specify username and password is in the URL itself.  Either method reveals your password to anyone who
bothers to run C<ps>.  To prevent the passwords from being seen,
store them in F<.wgetrc> or F<.netrc>, and make sure to protect
those files from other users with C<chmod>.  If the passwords are
really important, do not leave them lying in those files either---edit
the files and delete them after Wget has started the download.

For more information about security issues with Wget, 


=item B<-C on/off>


=item B<--cache=on/off>

When set to off, disable server-side cache.  In this case, Wget will
send the remote server an appropriate directive (B<Pragma:
no-cache>) to get the file from the remote service, rather than
returning the cached version.  This is especially useful for retrieving
and flushing out-of-date documents on proxy servers.

Caching is allowed by default.


=item B<--cookies=on/off>

When set to off, disable the use of cookies.  Cookies are a mechanism
for maintaining server-side state.  The server sends the client a cookie
using the C<Set-Cookie> header, and the client responds with the
same cookie upon further requests.  Since cookies allow the server
owners to keep track of visitors and for sites to exchange this
information, some consider them a breach of privacy.  The default is to
use cookies; however, I<storing> cookies is not on by default.


=item B<--load-cookies> I<file>

Load cookies from I<file> before the first HTTP retrieval.
I<file> is a textual file in the format originally used by Netscape's
F<cookies.txt> file.

You will typically use this option when mirroring sites that require
that you be logged in to access some or all of their content.  The login
process typically works by the web server issuing an HTTP cookie
upon receiving and verifying your credentials.  The cookie is then
resent by the browser when accessing that part of the site, and so
proves your identity.

Mirroring such a site requires Wget to send the same cookies your
browser sends when communicating with the site.  This is achieved by
B<--load-cookies>---simply point Wget to the location of the
F<cookies.txt> file, and it will send the same cookies your browser
would send in the same situation.  Different browsers keep textual
cookie files in different locations:


=over 4


=item @asis<Netscape 4.x.>

The cookies are in F<~/.netscape/cookies.txt>.


=item @asis<Mozilla and Netscape 6.x.>

Mozilla's cookie file is also named F<cookies.txt>, located
somewhere under F<~/.mozilla>, in the directory of your profile.
The full path usually ends up looking somewhat like
F<~/.mozilla/default/I<some-weird-string>/cookies.txt>.


=item @asis<Internet Explorer.>

You can produce a cookie file Wget can use by using the File menu,
Import and Export, Export Cookies.  This has been tested with Internet
Explorer 5; it is not guaranteed to work with earlier versions.


=item @asis<Other browsers.>

If you are using a different browser to create your cookies,
B<--load-cookies> will only work if you can locate or produce a
cookie file in the Netscape format that Wget expects.

=back


If you cannot use B<--load-cookies>, there might still be an
alternative.  If your browser supports a ``cookie manager'', you can use
it to view the cookies used when accessing the site you're mirroring.
Write down the name and value of the cookie, and manually instruct Wget
to send those cookies, bypassing the ``official'' cookie support:

	
	wget --cookies=off --header "Cookie: <name>=<value>"



=item B<--save-cookies> I<file>

Save cookies to I<file> at the end of session.  Cookies whose expiry
time is not specified, or those that have already expired, are not
saved.


=item B<--ignore-length>

Unfortunately, some HTTP servers (CGI programs, to be more
precise) send out bogus C<Content-Length> headers, which makes Wget
go wild, as it thinks not all the document was retrieved.  You can spot
this syndrome if Wget retries getting the same document again and again,
each time claiming that the (otherwise normal) connection has closed on
the very same byte.

With this option, Wget will ignore the C<Content-Length> header---as
if it never existed.


=item B<--header=>I<additional-header>

Define an I<additional-header> to be passed to the HTTP servers.
Headers must contain a B<:> preceded by one or more non-blank
characters, and must not contain newlines.

You may define more than one additional header by specifying
B<--header> more than once.

	
	wget --header='Accept-Charset: iso-8859-2' \
	     --header='Accept-Language: hr'        \
	       http://fly.srk.fer.hr/


Specification of an empty string as the header value will clear all
previous user-defined headers.


=item B<--proxy-user=>I<user>


=item B<--proxy-passwd=>I<password>

Specify the username I<user> and password I<password> for
authentication on a proxy server.  Wget will encode them using the
C<basic> authentication scheme.

Security considerations similar to those with B<--http-passwd>
pertain here as well.


=item B<--referer=>I<url>

Include `Referer: I<url>' header in HTTP request.  Useful for
retrieving documents with server-side processing that assume they are
always being retrieved by interactive web browsers and only come out
properly when Referer is set to one of the pages that point to them.


=item B<-s>


=item B<--save-headers>

Save the headers sent by the HTTP server to the file, preceding the
actual contents, with an empty line as the separator.


=item B<-U> I<agent-string>


=item B<--user-agent=>I<agent-string>

Identify as I<agent-string> to the HTTP server.

The HTTP protocol allows the clients to identify themselves using a
C<User-Agent> header field.  This enables distinguishing the
WWW software, usually for statistical purposes or for tracing of
protocol violations.  Wget normally identifies as
B<Wget/>I<version>, I<version> being the current version
number of Wget.

However, some sites have been known to impose the policy of tailoring
the output according to the C<User-Agent>-supplied information.
While conceptually this is not such a bad idea, it has been abused by
servers denying information to clients other than C<Mozilla> or
Microsoft C<Internet Explorer>.  This option allows you to change
the C<User-Agent> line issued by Wget.  Use of this option is
discouraged, unless you really know what you are doing.


=item B<--post-data=>I<string>


=item B<--post-file=>I<file>

Use POST as the method for all HTTP requests and send the specified data
in the request body.  C<--post-data> sends I<string> as data,
whereas C<--post-file> sends the contents of I<file>.  Other than
that, they work in exactly the same way.

Please be aware that Wget needs to know the size of the POST data in
advance.  Therefore the argument to C<--post-file> must be a regular
file; specifying a FIFO or something like F</dev/stdin> won't work.
It's not quite clear how to work around this limitation inherent in
HTTP/1.0.  Although HTTP/1.1 introduces I<chunked> transfer that
doesn't require knowing the request length in advance, a client can't
use chunked unless it knows it's talking to an HTTP/1.1 server.  And it
can't know that until it receives a response, which in turn requires the
request to have been completed -- a chicken-and-egg problem.

Note: if Wget is redirected after the POST request is completed, it will
not send the POST data to the redirected URL.  This is because URLs that
process POST often respond with a redirection to a regular page
(although that's technically disallowed), which does not desire or
accept POST.  It is not yet clear that this behavior is optimal; if it
doesn't work out, it will be changed.

This example shows how to log to a server using POST and then proceed to
download the desired pages, presumably only accessible to authorized
users:

	
	# Log in to the server.  This can be done only once.
	wget --save-cookies cookies.txt \
	     --post-data 'user=foo&password=bar' \
	     http://server.com/auth.php
	
	# Now grab the page or pages we care about.
	wget --load-cookies cookies.txt \
	     -p http://server.com/interesting/article.php


=back



=head2 FTP Options



=over 4


=item B<-nr>


=item B<--dont-remove-listing>

Don't remove the temporary F<.listing> files generated by FTP
retrievals.  Normally, these files contain the raw directory listings
received from FTP servers.  Not removing them can be useful for
debugging purposes, or when you want to be able to easily check on the
contents of remote server directories (e.g. to verify that a mirror
you're running is complete).

Note that even though Wget writes to a known filename for this file,
this is not a security hole in the scenario of a user making
F<.listing> a symbolic link to F</etc/passwd> or something and
asking C<root> to run Wget in his or her directory.  Depending on
the options used, either Wget will refuse to write to F<.listing>,
making the globbing/recursion/time-stamping operation fail, or the
symbolic link will be deleted and replaced with the actual
F<.listing> file, or the listing will be written to a
F<.listing.I<number>> file.

Even though this situation isn't a problem, though, C<root> should
never run Wget in a non-trusted user's directory.  A user could do
something as simple as linking F<index.html> to F</etc/passwd>
and asking C<root> to run Wget with B<-N> or B<-r> so the file
will be overwritten.


=item B<-g on/off>


=item B<--glob=on/off>

Turn FTP globbing on or off.  Globbing means you may use the
shell-like special characters (I<wildcards>), like B<*>,
B<?>, B<[> and B<]> to retrieve more than one file from the
same directory at once, like:

	
	wget ftp://gnjilux.srk.fer.hr/*.msg


By default, globbing will be turned on if the URL contains a
globbing character.  This option may be used to turn globbing on or off
permanently.

You may have to quote the URL to protect it from being expanded by
your shell.  Globbing makes Wget look for a directory listing, which is
system-specific.  This is why it currently works only with Unix FTP
servers (and the ones emulating Unix C<ls> output).


=item B<--passive-ftp>

Use the I<passive> FTP retrieval scheme, in which the client
initiates the data connection.  This is sometimes required for FTP
to work behind firewalls.


=item B<--retr-symlinks>

Usually, when retrieving FTP directories recursively and a symbolic
link is encountered, the linked-to file is not downloaded.  Instead, a
matching symbolic link is created on the local filesystem.  The
pointed-to file will not be downloaded unless this recursive retrieval
would have encountered it separately and downloaded it anyway.

When B<--retr-symlinks> is specified, however, symbolic links are
traversed and the pointed-to files are retrieved.  At this time, this
option does not cause Wget to traverse symlinks to directories and
recurse through them, but in the future it should be enhanced to do
this.

Note that when retrieving a file (not a directory) because it was
specified on the command-line, rather than because it was recursed to,
this option has no effect.  Symbolic links are always traversed in this
case.

=back



=head2 Recursive Retrieval Options



=over 4


=item B<-r>


=item B<--recursive>

Turn on recursive retrieving.  


=item B<-l> I<depth>


=item B<--level=>I<depth>

Specify recursion maximum depth level I<depth>.  The default maximum depth is 5.


=item B<--delete-after>

This option tells Wget to delete every single file it downloads,
I<after> having done so.  It is useful for pre-fetching popular
pages through a proxy, e.g.:

	
	wget -r -nd --delete-after http://whatever.com/~popular/page/


The B<-r> option is to retrieve recursively, and B<-nd> to not
create directories.  

Note that B<--delete-after> deletes files on the local machine.  It
does not issue the B<DELE> command to remote FTP sites, for
instance.  Also note that when B<--delete-after> is specified,
B<--convert-links> is ignored, so B<.orig> files are simply not
created in the first place.


=item B<-k>


=item B<--convert-links>

After the download is complete, convert the links in the document to
make them suitable for local viewing.  This affects not only the visible
hyperlinks, but any part of the document that links to external content,
such as embedded images, links to style sheets, hyperlinks to non-HTML
content, etc.

Each link will be changed in one of the two ways:


=over 4


=item *

The links to files that have been downloaded by Wget will be changed to
refer to the file they point to as a relative link.

Example: if the downloaded file F</foo/doc.html> links to
F</bar/img.gif>, also downloaded, then the link in F<doc.html>
will be modified to point to B<../bar/img.gif>.  This kind of
transformation works reliably for arbitrary combinations of directories.


=item *

The links to files that have not been downloaded by Wget will be changed
to include host name and absolute path of the location they point to.

Example: if the downloaded file F</foo/doc.html> links to
F</bar/img.gif> (or to F<../bar/img.gif>), then the link in
F<doc.html> will be modified to point to
F<http://I<hostname>/bar/img.gif>.

=back


Because of this, local browsing works reliably: if a linked file was
downloaded, the link will refer to its local name; if it was not
downloaded, the link will refer to its full Internet address rather than
presenting a broken link.  The fact that the former links are converted
to relative links ensures that you can move the downloaded hierarchy to
another directory.

Note that only at the end of the download can Wget know which links have
been downloaded.  Because of that, the work done by B<-k> will be
performed at the end of all the downloads.


=item B<-K>


=item B<--backup-converted>

When converting a file, back up the original version with a B<.orig>
suffix.  Affects the behavior of B<-N>.


=item B<-m>


=item B<--mirror>

Turn on options suitable for mirroring.  This option turns on recursion
and time-stamping, sets infinite recursion depth and keeps FTP
directory listings.  It is currently equivalent to
B<-r -N -l inf -nr>.


=item B<-p>


=item B<--page-requisites>

This option causes Wget to download all the files that are necessary to
properly display a given HTML page.  This includes such things as
inlined images, sounds, and referenced stylesheets.

Ordinarily, when downloading a single HTML page, any requisite documents
that may be needed to display it properly are not downloaded.  Using
B<-r> together with B<-l> can help, but since Wget does not
ordinarily distinguish between external and inlined documents, one is
generally left with ``leaf documents'' that are missing their
requisites.

For instance, say document F<1.html> contains an C<E<lt>IMGE<gt>> tag
referencing F<1.gif> and an C<E<lt>AE<gt>> tag pointing to external
document F<2.html>.  Say that F<2.html> is similar but that its
image is F<2.gif> and it links to F<3.html>.  Say this
continues up to some arbitrarily high number.

If one executes the command:

	
	wget -r -l 2 http://<site>/1.html


then F<1.html>, F<1.gif>, F<2.html>, F<2.gif>, and
F<3.html> will be downloaded.  As you can see, F<3.html> is
without its requisite F<3.gif> because Wget is simply counting the
number of hops (up to 2) away from F<1.html> in order to determine
where to stop the recursion.  However, with this command:

	
	wget -r -l 2 -p http://<site>/1.html


all the above files I<and> F<3.html>'s requisite F<3.gif>
will be downloaded.  Similarly,

	
	wget -r -l 1 -p http://<site>/1.html


will cause F<1.html>, F<1.gif>, F<2.html>, and F<2.gif>
to be downloaded.  One might think that:

	
	wget -r -l 0 -p http://<site>/1.html


would download just F<1.html> and F<1.gif>, but unfortunately
this is not the case, because B<-l 0> is equivalent to
B<-l inf>---that is, infinite recursion.  To download a single HTML
page (or a handful of them, all specified on the command-line or in a
B<-i> URL input file) and its (or their) requisites, simply leave off
B<-r> and B<-l>:

	
	wget -p http://<site>/1.html


Note that Wget will behave as if B<-r> had been specified, but only
that single page and its requisites will be downloaded.  Links from that
page to external documents will not be followed.  Actually, to download
a single page and all its requisites (even if they exist on separate
websites), and make sure the lot displays properly locally, this author
likes to use a few options in addition to B<-p>:

	
	wget -E -H -k -K -p http://<site>/<document>


To finish off this topic, it's worth knowing that Wget's idea of an
external document link is any URL specified in an C<E<lt>AE<gt>> tag, an
C<E<lt>AREAE<gt>> tag, or a C<E<lt>LINKE<gt>> tag other than C<E<lt>LINK
REL="stylesheet"E<gt>>.


=item B<--strict-comments>

Turn on strict parsing of HTML comments.  The default is to terminate
comments at the first occurrence of B<--E<gt>>.

According to specifications, HTML comments are expressed as SGML
I<declarations>.  Declaration is special markup that begins with
B<E<lt>!> and ends with B<E<gt>>, such as B<E<lt>!DOCTYPE ...E<gt>>, that
may contain comments between a pair of B<--> delimiters.  HTML
comments are ``empty declarations'', SGML declarations without any
non-comment text.  Therefore, B<E<lt>!--foo--E<gt>> is a valid comment, and
so is B<E<lt>!--one-- --two--E<gt>>, but B<E<lt>!--1--2--E<gt>> is not.

On the other hand, most HTML writers don't perceive comments as anything
other than text delimited with B<E<lt>!--> and B<--E<gt>>, which is not
quite the same.  For example, something like B<E<lt>!------------E<gt>>
works as a valid comment as long as the number of dashes is a multiple
of four (!).  If not, the comment technically lasts until the next
B<-->, which may be at the other end of the document.  Because of
this, many popular browsers completely ignore the specification and
implement what users have come to expect: comments delimited with
B<E<lt>!--> and B<--E<gt>>.

Until version 1.9, Wget interpreted comments strictly, which resulted in
missing links in many web pages that displayed fine in browsers, but had
the misfortune of containing non-compliant comments.  Beginning with
version 1.9, Wget has joined the ranks of clients that implements
``naive'' comments, terminating each comment at the first occurrence of
B<--E<gt>>.

If, for whatever reason, you want strict comment parsing, use this
option to turn it on.

=back



=head2 Recursive Accept/Reject Options



=over 4


=item B<-A> I<acclist> B<--accept> I<acclist>


=item B<-R> I<rejlist> B<--reject> I<rejlist>

Specify comma-separated lists of file name suffixes or patterns to
accept or reject (@pxref{Types of Files} for more details).


=item B<-D> I<domain-list>


=item B<--domains=>I<domain-list>

Set domains to be followed.  I<domain-list> is a comma-separated list
of domains.  Note that it does I<not> turn on B<-H>.


=item B<--exclude-domains> I<domain-list>

Specify the domains that are I<not> to be followed..


=item B<--follow-ftp>

Follow FTP links from HTML documents.  Without this option,
Wget will ignore all the FTP links.


=item B<--follow-tags=>I<list>

Wget has an internal table of HTML tag / attribute pairs that it
considers when looking for linked documents during a recursive
retrieval.  If a user wants only a subset of those tags to be
considered, however, he or she should be specify such tags in a
comma-separated I<list> with this option.


=item B<-G> I<list>


=item B<--ignore-tags=>I<list>

This is the opposite of the B<--follow-tags> option.  To skip
certain HTML tags when recursively looking for documents to download,
specify them in a comma-separated I<list>.  

In the past, the B<-G> option was the best bet for downloading a
single page and its requisites, using a command-line like:

	
	wget -Ga,area -H -k -K -r http://<site>/<document>


However, the author of this option came across a page with tags like
C<E<lt>LINK REL="home" HREF="/"E<gt>> and came to the realization that
B<-G> was not enough.  One can't just tell Wget to ignore
C<E<lt>LINKE<gt>>, because then stylesheets will not be downloaded.  Now the
best bet for downloading a single page and its requisites is the
dedicated B<--page-requisites> option.


=item B<-H>


=item B<--span-hosts>

Enable spanning across hosts when doing recursive retrieving.


=item B<-L>


=item B<--relative>

Follow relative links only.  Useful for retrieving a specific home page
without any distractions, not even those from the same hosts.


=item B<-I> I<list>


=item B<--include-directories=>I<list>

Specify a comma-separated list of directories you wish to follow when
downloading (@pxref{Directory-Based Limits} for more details.)  Elements
of I<list> may contain wildcards.


=item B<-X> I<list>


=item B<--exclude-directories=>I<list>

Specify a comma-separated list of directories you wish to exclude from
download (@pxref{Directory-Based Limits} for more details.)  Elements of
I<list> may contain wildcards.


=item B<-np>


=item B<--no-parent>

Do not ever ascend to the parent directory when retrieving recursively.
This is a useful option, since it guarantees that only the files
I<below> a certain hierarchy will be downloaded.


=back



=head1 FILES


=over 4


=item B</usr/local/etc/wgetrc>

Default location of the I<global> startup file.


=item B<.wgetrc>

User startup file.

=back


=head1 BUGS

You are welcome to send bug reports about GNU Wget to
E<lt>B<bug-wget@gnu.org>E<gt>.

Before actually submitting a bug report, please try to follow a few
simple guidelines.


=over 4


=item 1.

Please try to ascertain that the behavior you see really is a bug.  If
Wget crashes, it's a bug.  If Wget does not behave as documented,
it's a bug.  If things work strange, but you are not sure about the way
they are supposed to work, it might well be a bug.


=item 2.

Try to repeat the bug in as simple circumstances as possible.  E.g. if
Wget crashes while downloading B<wget -rl0 -kKE -t5 -Y0
http://yoyodyne.com -o /tmp/log>, you should try to see if the crash is
repeatable, and if will occur with a simpler set of options.  You might
even try to start the download at the page where the crash occurred to
see if that page somehow triggered the crash.

Also, while I will probably be interested to know the contents of your
F<.wgetrc> file, just dumping it into the debug message is probably
a bad idea.  Instead, you should first try to see if the bug repeats
with F<.wgetrc> moved out of the way.  Only if it turns out that
F<.wgetrc> settings affect the bug, mail me the relevant parts of
the file.


=item 3.

Please start Wget with B<-d> option and send the log (or the
relevant parts of it).  If Wget was compiled without debug support,
recompile it.  It is I<much> easier to trace bugs with debug support
on.


=item 4.

If Wget has crashed, try to run it in a debugger, e.g. C<gdb `which
wget` core> and type C<where> to get the backtrace.

=back


=head1 SEE ALSO

GNU Info entry for F<wget>.

=head1 AUTHOR

Originally written by Hrvoje Niksic E<lt>hniksic@arsdigita.comE<gt>.

=head1 COPYRIGHT

Copyright (c) 1996, 1997, 1998, 2000, 2001, 2002, 2003 Free
Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with the
Invariant Sections being ``GNU General Public License'' and ``GNU Free
Documentation License'', with no Front-Cover Texts, and with no
Back-Cover Texts.  A copy of the license is included in the section
entitled ``GNU Free Documentation License''.

